<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AcceptCoordinateWaitForDirection" xml:space="preserve">
    <value>👀 In che direzione stai guardando?</value>
  </data>
  <data name="AssignCode" xml:space="preserve">
    <value>🔢 Esegui le seguenti istruzioni e poi scansiona il codice QR sul quale ti fermi:

&lt;code&gt;{0}&lt;/code&gt;</value>
  </data>
  <data name="AssignQuiz" xml:space="preserve">
    <value>❓ &lt;b&gt;{0}&lt;/b&gt;
{1}

🟡 {2}
🟢 {3}
🔴 {4}</value>
  </data>
  <data name="CannotHandle" xml:space="preserve">
    <value>Scusa, non ho capito.</value>
  </data>
  <data name="CertificateAskForName" xml:space="preserve">
    <value>📃 &lt;b&gt;Certificato&lt;/b&gt;
Scrivimi il tuo nome completo per la generazione del certificato.</value>
  </data>
  <data name="CertificateAskForNameAgain" xml:space="preserve">
    <value>OK. Scrivimi il tuo nome completo.</value>
  </data>
  <data name="CertificateAskForNameConfirmation" xml:space="preserve">
    <value>Il tuo nome è &lt;i&gt;“{0}”&lt;/i&gt;. È corretto?</value>
  </data>
  <data name="CertificateAskForNameInvalid" xml:space="preserve">
    <value>Il nome non mi sembra valido, mi puoi scrivere il tuo nome completo?</value>
  </data>
  <data name="CertificateGenerationCaption" xml:space="preserve">
    <value>Il tuo certificato di completamento di CodyMaze</value>
  </data>
  <data name="CertificateGenerationDescriptionEvent" xml:space="preserve">
    <value>ha completato con successo l’attività “{0}”, interpretando sequenze di istruzioni con costrutti di ripetizione e di selezione.</value>
  </data>
  <data name="CertificateGenerationDescriptionPlain" xml:space="preserve">
    <value>ha completato con successo l’attività di “Hour of Code” con CodyMaze, interpretando sequenze di istruzioni con costrutti di ripetizione e di selezione.</value>
  </data>
  <data name="CertificateGenerationError" xml:space="preserve">
    <value>🚨 Ops, si è verificato un errore nella generazione del certificato.</value>
  </data>
  <data name="CertificateGenerationProcessing" xml:space="preserve">
    <value>✒ Sto generando il tuo certificato...</value>
  </data>
  <data name="CertificateGenerationReleaseDateFormat" xml:space="preserve">
    <value>D</value>
  </data>
  <data name="CertificateGenerationReleasedOn" xml:space="preserve">
    <value>Rilasciato</value>
  </data>
  <data name="CertificateGenerationTitle" xml:space="preserve">
    <value>Certificato di completamento</value>
  </data>
  <data name="CodeElse" xml:space="preserve">
    <value>altrimenti</value>
  </data>
  <data name="CodeForward" xml:space="preserve">
    <value>a</value>
  </data>
  <data name="CodeIf" xml:space="preserve">
    <value>se</value>
  </data>
  <data name="CodeLeft" xml:space="preserve">
    <value>s</value>
  </data>
  <data name="CodeNoStar" xml:space="preserve">
    <value>no stella</value>
  </data>
  <data name="CodePathAhead" xml:space="preserve">
    <value>strada davanti</value>
  </data>
  <data name="CodePathLeft" xml:space="preserve">
    <value>strada a sx</value>
  </data>
  <data name="CodePathRight" xml:space="preserve">
    <value>strada a dx</value>
  </data>
  <data name="CodeRight" xml:space="preserve">
    <value>d</value>
  </data>
  <data name="CodeStar" xml:space="preserve">
    <value>stella</value>
  </data>
  <data name="CodeWhile" xml:space="preserve">
    <value>finché</value>
  </data>
  <data name="ConfirmationNo" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="ConfirmationYes" xml:space="preserve">
    <value>Sì</value>
  </data>
  <data name="CorrectAnswer" xml:space="preserve">
    <value>☑ &lt;b&gt;Giusto!&lt;/b&gt;</value>
  </data>
  <data name="CorrectPosition" xml:space="preserve">
    <value>Molto bene! Sei nel posto giusto ({0}) e stai guardando {1}.</value>
  </data>
  <data name="CriticalError" xml:space="preserve">
    <value>🚨 &lt;b&gt;Errore&lt;/b&gt;
Sono spiacente, qualcosa è andato storto. Riavvia il gioco usando il comando /reset, per favore.</value>
  </data>
  <data name="DirectionEast" xml:space="preserve">
    <value>Est</value>
  </data>
  <data name="DirectionNorth" xml:space="preserve">
    <value>Nord</value>
  </data>
  <data name="DirectionSouth" xml:space="preserve">
    <value>Sud</value>
  </data>
  <data name="DirectionWest" xml:space="preserve">
    <value>Ovest</value>
  </data>
  <data name="FacingEast" xml:space="preserve">
    <value>verso est</value>
  </data>
  <data name="FacingNorth" xml:space="preserve">
    <value>verso nord</value>
  </data>
  <data name="FacingSouth" xml:space="preserve">
    <value>verso sud</value>
  </data>
  <data name="FacingWest" xml:space="preserve">
    <value>verso ovest</value>
  </data>
  <data name="GameComplete" xml:space="preserve">
    <value>&lt;b&gt;Hai completato il gioco.&lt;/b&gt; Grazie mille per aver partecipato! 🎖 Usa il comando /reset se desideri giocare nuovamente.</value>
  </data>
  <data name="GameCompletePrompt" xml:space="preserve">
    <value>Vuoi giocare di nuovo? Usa il comando /reset.</value>
  </data>
  <data name="Help1" xml:space="preserve">
    <value>🤖 Ciao! Sono il &lt;b&gt;bot di CodyMaze&lt;/b&gt; e ti guiderò durante il gioco. Una partita è composta da &lt;b&gt;13 sfide&lt;/b&gt;: per ogni sfida, ti invierò delle istruzioni che dovrai seguire esattamente in modo da raggiungere la destinazione finale della scacchiera.</value>
  </data>
  <data name="Help2" xml:space="preserve">
    <value>Per iniziare a giocare, ti prego di scansionare uno dei QR Code che si trovano lunga il bordo della scacchiera (sarebbe a dire, un codice qualsiasi sulla prima o ultima riga, o sulla prima o ultima colonna). Potrai usare qualsiasi applicazione di scansione dei QR Code per farlo.</value>
  </data>
  <data name="Help3" xml:space="preserve">
    <value>Le istruzioni che ti invierò per spostarti nella scacchiera potranno contenere i seguenti comandi:
&lt;code&gt;f&lt;/code&gt;: muoviti avanti,
&lt;code&gt;l&lt;/code&gt;: ruota a sinistra di 90 gradi,
&lt;code&gt;r&lt;/code&gt;: ruota a destra di 90 gradi,
e altre istruzioni come &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, e &lt;code&gt;while&lt;/code&gt;. I blocchi di codice tra parentesi graffe (&lt;code&gt;{}&lt;/code&gt;) potranno essere ripetute. Ad esempio, &lt;code&gt;2{fr}&lt;/code&gt; vuol dire che dovrai andare avanti e ruotare a destra due volte, in sequenza.</value>
  </data>
  <data name="LanguageCommandAsk" xml:space="preserve">
    <value>Che lingua vuoi parlare?</value>
  </data>
  <data name="LanguageConfirm" xml:space="preserve">
    <value>Va bene!</value>
  </data>
  <data name="ResetCommandOk" xml:space="preserve">
    <value>Ricominciamo! 👍 Scansiona uno dei QR Code lungo il bordo della scacchiera per iniziare a giocare.</value>
  </data>
  <data name="StartCommand" xml:space="preserve">
    <value>🤖 Ciao, sono il &lt;b&gt;bot di CodyMaze&lt;/b&gt;! Vai su una delle caselle lungo il bordo esterno della scacchiera e scansiona il codice QR che trovi lì.</value>
  </data>
  <data name="StartCommandCoordInvalid" xml:space="preserve">
    <value>Hmmm, il codice che hai scansionato non sembra valido. Riprova a scansionare uno dei codici QR della scacchiera.</value>
  </data>
  <data name="Victory" xml:space="preserve">
    <value>👏 Congratulazioni, hai completato CodyMaze!</value>
  </data>
  <data name="WaitForLocationFirstCoordinateWrong" xml:space="preserve">
    <value>Posizione di inizio non valida: ti prego di andare su una delle caselle lungo il bordo esterno della scacchiera e scansione il codice QR che è lì.</value>
  </data>
  <data name="WaitForLocationFirstSendDirection" xml:space="preserve">
    <value>🧭 Girati {0}.</value>
  </data>
  <data name="WaitForLocationWrongDirection" xml:space="preserve">
    <value>❌ Dovresti guardare &lt;b&gt;{0}&lt;/b&gt;. Conferma cliccando su un pulsante sopra.</value>
  </data>
  <data name="WelcomeGame" xml:space="preserve">
    <value>🤖 Ciao {0}, ti do il benvenuto al gioco &lt;b&gt;{1}&lt;/b&gt;! Iniziamo a giocare.</value>
  </data>
  <data name="WrongAnswerTryAgain" xml:space="preserve">
    <value>❌ &lt;b&gt;Sbagliato!&lt;/b&gt; Prova di nuovo.</value>
  </data>
  <data name="WrongMove" xml:space="preserve">
    <value>🚩 &lt;b&gt;Mossa sbagliata!&lt;/b&gt;
Torna in posizione {0} e guarda {1}, dopodiché esegui nuovamente le istruzioni:

&lt;code&gt;{2}&lt;/code&gt;</value>
  </data>
</root>